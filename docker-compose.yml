services:

# Database 
  database:
    container_name: database
    build:
      context: ./database
      dockerfile: Dockerfile
    env_file:
      - ./database/.env
    volumes:
      - database:/data/db
    restart: unless-stopped

# Adminer UI
  adminer:
    container_name: adminer
    image: adminer
    ports:
      - "8081:8080"
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy

# Backend FastAPI
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file:
      - ./backend/.env
      - ./rabbitmq/.env
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/backend/data
    restart: unless-stopped

 # RabbitMQ (with admin web UI)
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Preprocess async woker
  preprocess:
    container_name: preprocess
    build:
      context: .   
      dockerfile: pipelines/preprocess/Dockerfile
    env_file:
      - ./rabbitmq/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/backend/data  
    restart: unless-stopped
  
  # Format async worker
  format:
    container_name: format
    build:
      context: .  
      dockerfile: pipelines/format/Dockerfile
    env_file:
      - ./pipelines/format/.env
      - ./rabbitmq/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/backend/data  
    restart: unless-stopped
  
  # Vectorize async worker
  vectorize:
    container_name: vectorize
    build:
      context: .  
      dockerfile: pipelines/vectorize/Dockerfile
    env_file:
      - ./pipelines/vectorize/.env
      - ./rabbitmq/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend/data:/app/backend/data  
      - ./pipelines/vectorize/databases:/app/databases
    restart: unless-stopped

  # 
  barriers:
    container_name: barriers
    build:
      context: .  
      dockerfile: barriers/Dockerfile
    env_file:
      - ./rabbitmq/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Deploy async worker
  deploy:
    container_name: deploy
    build:
      context: .  
      dockerfile: pipelines/deploy/Dockerfile
    env_file:
      - ./rabbitmq/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./pipelines/vectorize/databases:/app/databases
    restart: unless-stopped

# Volumes
volumes:
  database:
    driver: local
  
